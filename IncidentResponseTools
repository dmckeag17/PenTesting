#Log Analysis Script - This script will analyze logs to identify suspicious activities.
import re

def analyze_logs(log_file_path):
    with open(log_file_path, 'r') as file:
        logs = file.readlines()

    suspicious_activities = []
    for log in logs:
        if "failed login" in log.lower() or "error" in log.lower():
            suspicious_activities.append(log.strip())

    return suspicious_activities

log_file = "path/to/your/logfile.log"
activities = analyze_logs(log_file)
print("Suspicious Activities Found:")
for activity in activities:
    print(activity)

#Malware Analysis Script - This script uses the pefile library to analyze Portable Executable (PE) files for potential malware indicators.
import pefile

def analyze_pe_file(file_path):
    pe = pefile.PE(file_path)
    print(f"File: {file_path}")
    print("Sections:")
    for section in pe.sections:
        print(f"\tName: {section.Name.decode().strip()}")
        print(f"\tVirtual Address: {section.VirtualAddress}")
        print(f"\tVirtual Size: {section.Misc_VirtualSize}")
        print(f"\tRaw Size: {section.SizeOfRawData}")

file_path = "path/to/your/executable.exe"
analyze_pe_file(file_path)

#Forensic Data Collection Script - This script collects basic system information and active processes for forensic analysis.
import os
import subprocess

def collect_system_info(output_file):
    with open(output_file, 'w') as file:
        # Collect system information
        file.write("System Information:\n")
        file.write(subprocess.getoutput('systeminfo'))
        file.write("\n\n")

        # Collect active processes
        file.write("Active Processes:\n")
        file.write(subprocess.getoutput('tasklist'))

output_file = "path/to/your/output_file.txt"
collect_system_info(output_file)
