#Log Analysis Script - This script will parse and analyze a log file to detect failed login attempts and alert if the number exceeds a certain threshold.
import re

def analyze_log(file_path, threshold=5):
    with open(file_path, 'r') as file:
        log_content = file.readlines()

    failed_attempts = {}
    for line in log_content:
        if "Failed login" in line:
            ip = re.search(r'\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b', line).group()
            failed_attempts[ip] = failed_attempts.get(ip, 0) + 1

    for ip, count in failed_attempts.items():
        if count > threshold:
            print(f"Alert: {count} failed login attempts from IP {ip}")

analyze_log('path/to/logfile.log')

#Alerting for Suspicious Activities Script - This script will monitor a log file in real-time and alert if it detects any suspicious activities, such as multiple failed login attempts from the same IP address.
import time
import re
from collections import defaultdict

def monitor_log(file_path, interval=10, threshold=3):
    print("Monitoring log file for suspicious activities...")
    failed_attempts = defaultdict(int)

    while True:
        with open(file_path, 'r') as file:
            for line in file:
                if "Failed login" in line:
                    ip = re.search(r'\b\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}\b', line).group()
                    failed_attempts[ip] += 1

                    if failed_attempts[ip] >= threshold:
                        print(f"Alert: Multiple failed login attempts from {ip}")

        time.sleep(interval)

monitor_log('path/to/logfile.log')

#Automated Penetration Testing Script - This script will perform a basic automated penetration test on a given target URL by checking for common vulnerabilities.
import requests
from bs4 import BeautifulSoup

def check_vulnerabilities(target_url):
    print(f"Checking vulnerabilities for {target_url}")

    # Check for SQL Injection vulnerability
    response = requests.get(f"{target_url}'")
    if "SQL syntax" in response.text:
        print("Potential SQL Injection vulnerability found!")

    # Check for XSS vulnerability
    xss_test_script = "<script>alert('XSS')</script>"
    response = requests.get(f"{target_url}{xss_test_script}")
    if xss_test_script in response.text:
        print("Potential XSS vulnerability found!")

    # Add more checks as needed

check_vulnerabilities('http://example.com')
